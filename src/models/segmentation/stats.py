import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import numpy as np

# df_dice = pd.read_csv(r"C:\Users\CHU\Desktop\comparaison\unet3d_3res\val_metric.csv")
# print(df_dice)
# value = df_dice["Value"]
# epoch = df_dice['Step']
#
# plt.plot(epoch, value)
# plt.axis([0, 501, 0, 1])
# plt.title('Average Dice Score Per Epoch', fontsize=20)
# plt.ylabel('Dice Score', fontsize=18)
# plt.xlabel('Epoch', fontsize=18)
# plt.grid(visible=True)
# plt.show()
#########################################################################################################
#
df_loss_val = pd.read_csv(r"C:\Users\CHU\Desktop\comparaison\unet3d_3res\val_loss.csv")
df_loss_train = pd.read_csv(r"C:\Users\CHU\Desktop\comparaison\unet3d_3res\train_loss.csv")
#
# print(df_loss_val)
# print(df_loss_train)
plt.plot(df_loss_val['Step'], df_loss_val['Value'], 'g', label='Validation Loss')
plt.plot(df_loss_train['Step'], df_loss_train['Value'], 'b', label='Training Loss')
plt.title("Perte de Dice moyenne à chaque itération de l'apprentissage", fontsize=20)
plt.ylabel('Perte de Dice', fontsize=18)
plt.xlabel('Itération', fontsize=18)
plt.legend(fontsize=15)
plt.grid(visible=True)
plt.show()

######################################################################################################################
#
# data = {
#     'unet3d_3res': [0.8771067261695862, 0.892059326171875, 0.8354037404060364, 0.8824029564857483, 0.8065465092658997, 0.902959942817688, 0.8377028107643127, 0.7996369004249573, 0.6199148893356323, 0.8230082988739014, 0.8572997450828552, 0.8357297778129578, 0.783403217792511, 0.8332642316818237, 0.8595782518386841, 0.8569887280464172, 0.7724469900131226, 0.8577194213867188, 0.7843639850616455, 0.8721958994865417, 0.9113354086875916, 0.868939220905304, 0.9129926562309265, 0.8935741186141968, 0.8900511860847473, 0.8507648706436157, 0.8245065808296204, 0.9226119518280029, 0.8930150270462036, 0.756077229976654, 0.8367689251899719, 0.8289560079574585, 0.89531010389328, 0.9031485319137573, 0.8304576873779297, 0.8620117902755737, 0.9152328372001648, 0.8675682544708252, 0.90289705991745, 0.9049263000488281],
#     'unet3d_2res': [0.8688842058181763, 0.9063975214958191, 0.825245201587677, 0.9149885177612305, 0.8263618350028992, 0.8874484896659851, 0.8619132041931152, 0.7852675318717957, 0.6449584364891052, 0.7947132587432861, 0.8621619343757629, 0.847477912902832, 0.8359508514404297, 0.8078010082244873, 0.8792961239814758, 0.8378546237945557, 0.7983513474464417, 0.8049605488777161, 0.7872298955917358, 0.8330181837081909, 0.8936058282852173, 0.8750195503234863, 0.878573477268219, 0.9062895178794861, 0.9112493395805359, 0.8267711997032166, 0.8377645611763, 0.9220168590545654, 0.8993991613388062, 0.6468303799629211, 0.8181593418121338, 0.8731604814529419, 0.8586029410362244, 0.9148334264755249, 0.8391972184181213, 0.8524434566497803, 0.9198087453842163, 0.8171785473823547, 0.9154027104377747, 0.9134467840194702],
# }
# df = pd.DataFrame(data=data)
#
# sns.boxplot(data=df, showfliers=False)
# sns.stripplot(data=df, color='black')
# plt.title('Dice Coefficient Distribution on Validation Set', fontsize=20)
# plt.ylabel('Dice Coefficient', fontsize=18)
# plt.ylim([0, 1])
# plt.xlabel('Models', fontsize=18)
# plt.grid(visible=True, axis='y')
# plt.show()
#

#######################################################################################################################
#Show all nets
#######################################################################################################################
data = {
    'unet3d_res': [0.8771067261695862, 0.892059326171875, 0.8354037404060364, 0.8824029564857483, 0.8065465092658997, 0.902959942817688, 0.8377028107643127, 0.7996369004249573, 0.7474440932273865, 0.8230082988739014, 0.8572997450828552, 0.8357297778129578, 0.783403217792511, 0.8332642316818237, 0.8595782518386841, 0.8569887280464172, 0.7724469900131226, 0.8577194213867188, 0.7843639850616455, 0.8721958994865417, 0.9113354086875916, 0.868939220905304, 0.9129926562309265, 0.8935741186141968, 0.8900511860847473, 0.8507648706436157, 0.8245065808296204, 0.9226119518280029, 0.8930150270462036, 0.756077229976654, 0.8367689251899719, 0.8289560079574585, 0.89531010389328, 0.9031485319137573, 0.8304576873779297, 0.8620117902755737, 0.9152328372001648, 0.8675682544708252, 0.90289705991745, 0.9049263000488281],
    'unet3d': [0.8264932036399841, 0.8661193251609802, 0.7733941078186035, 0.8617028594017029, 0.823247492313385, 0.8860780000686646, 0.8277974128723145, 0.7467324733734131, 0.1385735124349594, 0.7400890588760376, 0.8205368518829346, 0.8394177556037903, 0.8567153215408325, 0.8429831862449646, 0.8176105618476868, 0.789508044719696, 0.6762807965278625, 0.8382419347763062, 0.7749685049057007, 0.8718703985214233, 0.8860658407211304, 0.8564073443412781, 0.8882119655609131, 0.8782971501350403, 0.8661074042320251, 0.8429967164993286, 0.8290598392486572, 0.8993760943412781, 0.8525258898735046, 0.6189833283424377, 0.8400570750236511, 0.870373010635376, 0.7260929942131042, 0.8823618292808533, 0.8131456971168518, 0.7531380653381348, 0.857300877571106, 0.8172858953475952, 0.8642511963844299, 0.8906167149543762],
    'vnet': [0.8557587265968323, 0.8575316071510315, 0.8454457521438599, 0.8572719693183899, 0.8095887303352356, 0.8869617581367493, 0.8982080817222595, 0.7504661083221436, 0.29189062118530273, 0.7528936862945557, 0.8612829446792603, 0.8548926711082458, 0.8377962112426758, 0.831152081489563, 0.8139448761940002, 0.8019589185714722, 0.7025658488273621, 0.8380932807922363, 0.7446901202201843, 0.7989034652709961, 0.8796669244766235, 0.8823970556259155, 0.8724055290222168, 0.8694359064102173, 0.8290995359420776, 0.8598191142082214, 0.785119354724884, 0.8699063658714294, 0.7966432571411133, 0.6601684093475342, 0.8163760900497437, 0.7871684432029724, 0.8793843984603882, 0.8615429997444153, 0.8496814370155334, 0.6861084699630737, 0.901238739490509, 0.7202238440513611, 0.8513705730438232, 0.8645334243774414],
    'segresnet3d': [0.8851089477539062, 0.8899704813957214, 0.7212774157524109, 0.8669184446334839, 0.813288688659668, 0.8415279984474182, 0.8702420592308044, 0.825771152973175, 0.7158899307250977, 0.8032705187797546, 0.7831645011901855, 0.8479413390159607, 0.838741660118103, 0.8348903656005859, 0.8579293489456177, 0.8212576508522034, 0.7210053205490112, 0.8232854008674622, 0.836129367351532, 0.8799529671669006, 0.8975194096565247, 0.8092672824859619, 0.9048997163772583, 0.9042518138885498, 0.8938148617744446, 0.8548195362091064, 0.8418043851852417, 0.9028925895690918, 0.8807114958763123, 0.7009710073471069, 0.8250847458839417, 0.8361266255378723, 0.875474214553833, 0.9100391864776611, 0.8343082070350647, 0.8444604277610779, 0.8982005715370178, 0.8599326014518738, 0.9035363793373108, 0.9036144614219666],
    'UNETR': [0.8890370726585388, 0.8625931143760681, 0.7642119526863098, 0.8647963404655457, 0.8119115233421326, 0.8760532736778259, 0.8122803568840027, 0.7838246822357178, 0.26538875699043274, 0.7430052161216736, 0.8528189063072205, 0.8308421969413757, 0.8123506307601929, 0.7725321650505066, 0.8331167697906494, 0.8161569237709045, 0.7155323028564453, 0.8240019679069519, 0.8014215230941772, 0.8459028005599976, 0.8335227370262146, 0.8521324396133423, 0.7478722333908081, 0.8785168528556824, 0.8787083029747009, 0.7923892736434937, 0.8385650515556335, 0.8853754997253418, 0.8076696395874023, 0.6120510697364807, 0.8209712505340576, 0.8689520955085754, 0.7817151546478271, 0.8412352204322815, 0.8041799068450928, 0.7184019088745117, 0.8375844955444336, 0.7815616726875305, 0.8658097386360168, 0.8609647750854492],
    'Swin_UNETR': [0.8652303814888, 0.8611849546432495, 0.7761439085006714, 0.8707492351531982, 0.7035677433013916, 0.8822972178459167, 0.7658290266990662, 0.7493236660957336, 0.4828483462333679, 0.7348647713661194, 0.8022313117980957, 0.8137418627738953, 0.8802408576011658, 0.8420019745826721, 0.8529796004295349, 0.8399159908294678, 0.6642529368400574, 0.8306303024291992, 0.7934169769287109, 0.8832150101661682, 0.8781681656837463, 0.8649709820747375, 0.8841249346733093, 0.8855968713760376, 0.8952795267105103, 0.8209892511367798, 0.7892199158668518, 0.8978940844535828, 0.8867514133453369, 0.6021860241889954, 0.8280372619628906, 0.8675665855407715, 0.7464911937713623, 0.8845130801200867, 0.8141299486160278, 0.8091648817062378, 0.8450202941894531, 0.7744787335395813, 0.8678850531578064, 0.896935224533081]
}

df = pd.DataFrame(data=data)
plot = sns.boxplot(data=df, showfliers=False)
sns.stripplot(data=df, color='black', alpha=0.3)
medians = df.median()
vertical_offset = df.median() * 0.005

for i in range(len(df.columns)):
    plot.text(
        x=i,
        y=medians[i] + vertical_offset[i],
        s=np.round(medians[i], decimals=4),
        horizontalalignment='center',
        fontsize=16,
        color='w',
        weight='semibold'
    )

plt.title('Dice Coefficient Distribution on Validation Set of Different Models', fontsize=20)
plt.ylabel('Dice Coefficient', fontsize=18)
plt.ylim([0, 1])
plt.xlabel('Models', fontsize=18)
plt.grid(visible=True, axis='y')
plt.show()

#####################################################################################################################
data = {
    'unet3d_res': [0.8771067261695862, 0.892059326171875, 0.8354037404060364, 0.8824029564857483, 0.8065465092658997, 0.902959942817688, 0.8377028107643127, 0.7996369004249573, 0.7474440932273865, 0.8230082988739014, 0.8572997450828552, 0.8357297778129578, 0.783403217792511, 0.8332642316818237, 0.8595782518386841, 0.8569887280464172, 0.7724469900131226, 0.8577194213867188, 0.7843639850616455, 0.8721958994865417, 0.9113354086875916, 0.868939220905304, 0.9129926562309265, 0.8935741186141968, 0.8900511860847473, 0.8507648706436157, 0.8245065808296204, 0.9226119518280029, 0.8930150270462036, 0.756077229976654, 0.8367689251899719, 0.8289560079574585, 0.89531010389328, 0.9031485319137573, 0.8304576873779297, 0.8620117902755737, 0.9152328372001648, 0.8675682544708252, 0.90289705991745, 0.9049263000488281],
    'unet3d': [0.8264932036399841, 0.8661193251609802, 0.7733941078186035, 0.8617028594017029, 0.823247492313385, 0.8860780000686646, 0.8277974128723145, 0.7467324733734131, 0.1385735124349594, 0.7400890588760376, 0.8205368518829346, 0.8394177556037903, 0.8567153215408325, 0.8429831862449646, 0.8176105618476868, 0.789508044719696, 0.6762807965278625, 0.8382419347763062, 0.7749685049057007, 0.8718703985214233, 0.8860658407211304, 0.8564073443412781, 0.8882119655609131, 0.8782971501350403, 0.8661074042320251, 0.8429967164993286, 0.8290598392486572, 0.8993760943412781, 0.8525258898735046, 0.6189833283424377, 0.8400570750236511, 0.870373010635376, 0.7260929942131042, 0.8823618292808533, 0.8131456971168518, 0.7531380653381348, 0.857300877571106, 0.8172858953475952, 0.8642511963844299, 0.8906167149543762],
    'vnet': [0.8557587265968323, 0.8575316071510315, 0.8454457521438599, 0.8572719693183899, 0.8095887303352356, 0.8869617581367493, 0.8982080817222595, 0.7504661083221436, 0.29189062118530273, 0.7528936862945557, 0.8612829446792603, 0.8548926711082458, 0.8377962112426758, 0.831152081489563, 0.8139448761940002, 0.8019589185714722, 0.7025658488273621, 0.8380932807922363, 0.7446901202201843, 0.7989034652709961, 0.8796669244766235, 0.8823970556259155, 0.8724055290222168, 0.8694359064102173, 0.8290995359420776, 0.8598191142082214, 0.785119354724884, 0.8699063658714294, 0.7966432571411133, 0.6601684093475342, 0.8163760900497437, 0.7871684432029724, 0.8793843984603882, 0.8615429997444153, 0.8496814370155334, 0.6861084699630737, 0.901238739490509, 0.7202238440513611, 0.8513705730438232, 0.8645334243774414],
    'segresnet3d': [0.8851089477539062, 0.8899704813957214, 0.7212774157524109, 0.8669184446334839, 0.813288688659668, 0.8415279984474182, 0.8702420592308044, 0.825771152973175, 0.7158899307250977, 0.8032705187797546, 0.7831645011901855, 0.8479413390159607, 0.838741660118103, 0.8348903656005859, 0.8579293489456177, 0.8212576508522034, 0.7210053205490112, 0.8232854008674622, 0.836129367351532, 0.8799529671669006, 0.8975194096565247, 0.8092672824859619, 0.9048997163772583, 0.9042518138885498, 0.8938148617744446, 0.8548195362091064, 0.8418043851852417, 0.9028925895690918, 0.8807114958763123, 0.7009710073471069, 0.8250847458839417, 0.8361266255378723, 0.875474214553833, 0.9100391864776611, 0.8343082070350647, 0.8444604277610779, 0.8982005715370178, 0.8599326014518738, 0.9035363793373108, 0.9036144614219666],
    'UNETR': [0.8890370726585388, 0.8625931143760681, 0.7642119526863098, 0.8647963404655457, 0.8119115233421326, 0.8760532736778259, 0.8122803568840027, 0.7838246822357178, 0.26538875699043274, 0.7430052161216736, 0.8528189063072205, 0.8308421969413757, 0.8123506307601929, 0.7725321650505066, 0.8331167697906494, 0.8161569237709045, 0.7155323028564453, 0.8240019679069519, 0.8014215230941772, 0.8459028005599976, 0.8335227370262146, 0.8521324396133423, 0.7478722333908081, 0.8785168528556824, 0.8787083029747009, 0.7923892736434937, 0.8385650515556335, 0.8853754997253418, 0.8076696395874023, 0.6120510697364807, 0.8209712505340576, 0.8689520955085754, 0.7817151546478271, 0.8412352204322815, 0.8041799068450928, 0.7184019088745117, 0.8375844955444336, 0.7815616726875305, 0.8658097386360168, 0.8609647750854492],
    'Swin_UNETR': [0.8652303814888, 0.8611849546432495, 0.7761439085006714, 0.8707492351531982, 0.7035677433013916, 0.8822972178459167, 0.7658290266990662, 0.7493236660957336, 0.4828483462333679, 0.7348647713661194, 0.8022313117980957, 0.8137418627738953, 0.8802408576011658, 0.8420019745826721, 0.8529796004295349, 0.8399159908294678, 0.6642529368400574, 0.8306303024291992, 0.7934169769287109, 0.8832150101661682, 0.8781681656837463, 0.8649709820747375, 0.8841249346733093, 0.8855968713760376, 0.8952795267105103, 0.8209892511367798, 0.7892199158668518, 0.8978940844535828, 0.8867514133453369, 0.6021860241889954, 0.8280372619628906, 0.8675665855407715, 0.7464911937713623, 0.8845130801200867, 0.8141299486160278, 0.8091648817062378, 0.8450202941894531, 0.7744787335395813, 0.8678850531578064, 0.896935224533081]
}
df = pd.DataFrame(data=data)
plot = sns.violinplot(data=df, cut=0)
sns.stripplot(data=df, color='black', alpha=0.7)
plot.tick_params(labelsize=20)

print(len(df.columns))
medians = df.median()
print(medians)
print(medians[1])
vertical_offset = df.median() * 0.12 # offset from median for display
print(vertical_offset)

for i in range(len(df.columns)):
    plot.text(
        x=i - vertical_offset[i],
        y=medians[i],
        s=np.round(medians[i], decimals=4),
        horizontalalignment='center',
        fontsize=14,
        color='w',
        weight='semibold'
    )


plt.title('Distribution des coefficients de Dice de différents modèles sur le jeu de validation', fontsize=20)
plt.ylabel('Coefficient de Dice', fontsize=20)
plt.ylim([0, 1])
plt.xlabel('Modèles', fontsize=20)
plt.grid(visible=True, axis='y')
plt.show()